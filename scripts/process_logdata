#!/usr/bin/python
from __future__ import unicode_literals
import sys,getopt,os
import Helpers
import psutil
import glob,os,shutil
import socket
import subprocess
import pdb
import os.path

import time
import sys


    
class Process(object):
    def __init__(self,PID,Name,RAM_kB=None,CPU_Perc=None):
        self.PID = PID
        self.Name = Name
        self.RAM_kB = []
        self.CPU_Perc = []

def print_usage():
    print "Usage Instructions"
    print "Process Log: -p <path to log>"

def process_log(process_file):
    PID_Column = 2
    CPU_Column = 6
    RAM_Column = 11
    COMMAND_Column = 16
    ProcessList = []
    linesread = 0
    entrycounter = -1
    with open(process_file) as f:
        for line in f:
            linesread = linesread + 1
            
            items = line.split()
            if(len(items) > 0):
                if(items[0] == "Linux"):
                    entrycounter = entrycounter + 1
                elif(items[0].isdigit()):
                    if((items[COMMAND_Column].startswith("ps") == 0) and
                        (items[COMMAND_Column].startswith("sh") == 0) and
                        (items[COMMAND_Column].startswith("grep") == 0) and
                        (items[COMMAND_Column].startswith("tail") == 0) and
                        (items[COMMAND_Column].startswith("pidstat") == 0) and
                        (items[COMMAND_Column].startswith("watch") == 0) and
                        (items[COMMAND_Column].startswith("getty") == 0) and
                        (items[COMMAND_Column].startswith("log_processdata") == 0) and
                        (items[COMMAND_Column].startswith("top") == 0)):
                        add_new_process = 1
                        for i in range(len(ProcessList)):
                            p = ProcessList[i]
                            if((p.PID == items[PID_Column]) and (p.Name == items[COMMAND_Column])):
                                add_new_process = 0
                                temp_cpu = int(float(items[CPU_Column]))
                                ProcessList[i].RAM_kB.append(items[RAM_Column])
                                ProcessList[i].CPU_Perc.append(temp_cpu)

                        if(add_new_process == 1):
                            
                            ProcessList.append(Process(items[PID_Column],items[COMMAND_Column]))
                            for j in range(entrycounter-1):
                                ProcessList[len(ProcessList)-1].RAM_kB.append(0)
                                ProcessList[len(ProcessList)-1].CPU_Perc.append(0)
                            temp_cpu = int(float(items[CPU_Column]))
                            ProcessList[len(ProcessList)-1].RAM_kB.append(items[RAM_Column])
                            ProcessList[len(ProcessList)-1].CPU_Perc.append(temp_cpu)
                            
                            
    
    entrycounter = entrycounter +1
    for i in range(len(ProcessList)):
        p  = ProcessList[i]
        print p.Name + " " + str(len(p.RAM_kB)) + " " + str(len(p.CPU_Perc))
        if(len(p.RAM_kB) > entrycounter):
            print "1"
            pdb.set_trace()
        if(len(p.RAM_kB) < entrycounter):
            for j in range(entrycounter-len(p.RAM_kB)):
                ProcessList[i].RAM_kB.append(0)
        if(len(p.CPU_Perc) > entrycounter):
            print "2"
            pdb.set_trace()
        if(len(p.CPU_Perc) < entrycounter):
            for j in range(entrycounter-len(p.CPU_Perc)):
                ProcessList[i].CPU_Perc.append(0)
    outpath_ram = "processdata_ram.csv"
    outfile_ram = open(outpath_ram,'w')
    tempstr = "Index,"
    for p in ProcessList:
        tempstr = tempstr + p.Name + "_" + p.PID + ","
    tempstr = tempstr + "\n"
    outfile_ram.write(tempstr)
    tempstr = ""
    for i in range(entrycounter):
        tempstr = str(i) + ","
        for p in ProcessList:
            tempstr = tempstr + str(p.RAM_kB[i]) + ","
        tempstr = tempstr + "\n"
        outfile_ram.write(tempstr)
        #print "Writing RAM File Line: " + str(i)
        
    outpath_cpu = "processdata_cpu.csv"
    outfile_cpu = open(outpath_cpu,'w')
    tempstr = "Index,"
    for p in ProcessList:
        tempstr = tempstr + p.Name + "_" + p.PID + ","
    tempstr = tempstr + "\n"
    outfile_cpu.write(tempstr)
    tempstr = ""
    for i in range(entrycounter):
        tempstr = str(i) + ","
        for p in ProcessList:
            tempstr = tempstr + str(p.CPU_Perc[i]) + ","
        tempstr = tempstr + "\n"
        outfile_cpu.write(tempstr)
        #print "Writing CPU File Line: " + str(i)
    
                            
if len(sys.argv) == 1:
    print_usage()
    sys.exit(0)
elif (sys.argv[1] == "-p"):
    process_log(sys.argv[2])
else:
    print_usage()
    sys.exit(0)
                
        
